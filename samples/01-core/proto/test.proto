package test;

/*
// TODO check all types
// https://developers.google.com/protocol-buffers/docs/proto
double		// double	double
float		// float	float
int32	    // Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.	int32	int
int64	    // Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.	int64	long
uint32	    // Uses variable-length encoding.	uint32	int[1]
uint64	    // Uses variable-length encoding.	uint64	long[1]
sint32	    // Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.	int32	int
sint64	    // Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.	int64	long
fixed32  	// Always four bytes. More efficient than uint32 if values are often greater than 228.	uint32	int[1]
fixed64	    // Always eight bytes. More efficient than uint64 if values are often greater than 256.	uint64	long[1]
sfixed32	// Always four bytes.	int32	int
sfixed64	// Always eight bytes.	int64	long
bool		// bool	boolean
string	    // A string must always contain UTF-8 encoded or 7-bit ASCII text.	string	String
bytes	    // May contain any arbitrary sequence of bytes.	string	ByteString
*/

message ComplexMessage {
    enum MsgType {
        AAA = 100;
        BBB = 101;
    }
    message Point{
      required int32 x = 1;
      required int32 y = 2;
    }

    required MsgType   type      = 1 [default = AAA];
    required string msg       = 2;
    required int32  id        = 3;
    required uint32 uid       = 4;
    required bool   offline   = 5;
    required bytes  attach    = 6;
    repeated string statuses  = 7;
    repeated Point  points    = 8;
    required sint32  rnd      = 9;
    required MsgType typeOpt  = 10;

    optional string msgOpt    = 11;
     repeated sint32  rnds      = 12;
}


message IntTestMessage {
    optional int32 i32 = 1;
    optional uint32 ui32 = 2;
    optional int64 i64 = 3;
    optional uint64 ui64 = 4;
    optional sint32 si32 = 5;
    optional sint64 sui64 = 6;
    optional float f = 7;
    optional double d = 8;
}

message Foo {
  extensions 100 to 199;
}

extend Foo {
  optional int32 bar = 126;
}

